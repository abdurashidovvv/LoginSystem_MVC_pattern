package com.abdurashidov.myapplication.modelimport com.abdurashidov.myapplication.model.domain.Credentialimport com.abdurashidov.myapplication.model.observer.AccountObserverimport com.abdurashidov.myapplication.model.observer.DomainObserverimport com.abdurashidov.myapplication.model.validator.Validatorclass DataAccessLayer(    private val userValidator: Validator,    private val accountRepository: AccountRepository) {    private val observers= mutableListOf<DomainObserver>()    fun register(observer: DomainObserver)=observers.add(observer)    fun unregister(observer: DomainObserver)=observers.remove(observer)    fun performLogin(userName:String, password:String){        val credentials=Credential(userName, password)        if (userValidator.validate(credentials)){            notify(AccountObserver::accountLoggedIn)        }else{            notify(AccountObserver::accountUnknown)        }    }    private fun notify(action: (AccountObserver)->Unit){        observers.filterIsInstance<AccountObserver>().onEach { action(it) }    }    fun getCurrentAccount()=accountRepository.account}